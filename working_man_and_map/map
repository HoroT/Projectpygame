from Sprite import Player


import sys

import pygame


def load_level(filename):
    filename = "iamges/map_images/" + filename
    # читаем уровень, убирая символы перевода строки
    with open(filename, 'r') as mapFile:
        level_map = [line.strip() for line in mapFile]

    # и подсчитываем максимальную длину
    max_width = max(map(len, level_map))

    # дополняем каждую строку пустыми клетками ('.')
    return list(map(lambda x: x.ljust(max_width, '.'), level_map))


class Tile(pygame.sprite.Sprite):   # determination of cells
    def __init__(self, tile_type, pos_x, pos_y):
        super().__init__(tiles_group, all_sprites)
        self.image = tile_images[tile_type]
        self.rect = self.image.get_rect().move(
            tile_width * pos_x, tile_height * pos_y)


# class Player(pygame.sprite.Sprite):
#     def __init__(self, pos_x, pos_y):
#         super().__init__(player_group, all_sprites)
#         self.speed = 50
#         self.forward = AnimatedSprite(pygame.image.load("iamges/walk_forward.jpg"), 1, 5).frames
#         self.back = AnimatedSprite(pygame.image.load("iamges/walk_back.jpg"), 1, 5).frames
#         self.right = AnimatedSprite(pygame.image.load("iamges/walk_right.jpg"), 1, 5).frames
#         self.left = AnimatedSprite(pygame.image.load("iamges/walk_left.jpg"), 1, 5).frames
#         self.le = 0
#         self.ri = 0
#         self.fo = 0
#         self.ba = 0
#         self.score = 0
#         self.image = self.start_picture(self.score)
#         self.rect = self.image.get_rect().move(
#             tile_width * pos_x + 15, tile_height * pos_y + 5)
#
#     def start_picture(self, sc):
#         if sc == 0:
#             return self.forward[0]
#         elif sc == 1:
#             return self.back[0]
#         elif sc == 2:
#             return self.left[0]
#         elif sc == 3:
#             return self.right[0]
#
#     def update(self):
#         self.image = self.start_picture(self.score)
#         if pygame.key.get_pressed()[pygame.K_a]:  # left moving
#             self.score = 2
#             self.rect.x -= self.speed
#             self.le += 1
#             if self.le != 5:
#                 self.image = self.left[self.le]
#             else:
#                 self.le = 0
#                 self.image = self.left[self.le]
#         elif pygame.key.get_pressed()[pygame.K_d]:  # right moving
#             self.score = 3
#             self.rect.x += self.speed
#             self.ri += 1
#             if self.ri != 5:
#                 self.image = self.right[self.ri]
#             else:
#                 self.ri = 0
#                 self.image = self.right[self.ri]
#         elif pygame.key.get_pressed()[pygame.K_w]:  # forward moving
#             self.score = 0
#             self.rect.y -= self.speed
#             self.fo += 1
#             if self.fo != 5:
#                 self.image = self.forward[self.fo]
#             else:
#                 self.fo = 0
#                 self.image = self.forward[self.fo]
#         elif pygame.key.get_pressed()[pygame.K_s]:  # back moving
#             self.score = 1
#             self.rect.y += self.speed
#             self.ba += 1
#             if self.ba != 5:
#                 self.image = self.back[self.ba]
#             else:
#                 self.ba = 0
#                 self.image = self.back[self.ba]
#         return self.image
#
#
# class AnimatedSprite(pygame.sprite.Sprite):     # cutting sprites
#     def __init__(self, sheet, columns, rows):
#         self.frames = []
#         self.cut_sheet(sheet, columns, rows)
#         self.cur_frame = 0
#         self.image = self.frames[self.cur_frame]
#
#     def cut_sheet(self, sheet, columns, rows):
#         self.rect = pygame.Rect(0, 0, sheet.get_width() // columns,
#                                 sheet.get_height() // rows)
#         for j in range(rows):
#             for i in range(columns):
#                 frame_location = (self.rect.w * i, self.rect.h * j)
#                 self.frames.append(sheet.subsurface(pygame.Rect(
#                     frame_location, self.rect.size)))   #


def generate_level(level):
    new_player, x, y = None, None, None
    for y in range(len(level)):
        for x in range(len(level[y])):
            if level[y][x] == '.':
                Tile('empty', x, y)
            elif level[y][x] == '#':
                Tile('hor_wall', x, y)
            elif level[y][x] == '1':
                Tile('ver_wall', x, y)
            elif level[y][x] == '@':
                Tile('empty', x, y)
                new_player = Player(x, y, player_group, all_sprites, tile_width, tile_height)
            elif level[y][x] == '2':
                Tile('r1_wall', x, y)
            elif level[y][x] == '3':
                Tile('l1_wall', x, y)
            elif level[y][x] == '4':
                Tile('l2_wall', x, y)
            elif level[y][x] == '5':
                Tile('r2_wall', x, y)
            elif level[y][x] == 't':
                Tile('t1_u', x, y)
            elif level[y][x] == '6':
                Tile('t2_u', x, y)
            elif level[y][x] == '7':
                Tile('t3_u', x, y)
            elif level[y][x] == '8':
                Tile('t1_d', x, y)
            elif level[y][x] == '9':
                Tile('t2_d', x, y)
            elif level[y][x] == '0':
                Tile('t3_d', x, y)
            elif level[y][x] == 'r':
                Tile('rd', x, y)
            elif level[y][x] == 'w':
                Tile('wt', x, y)
            elif level[y][x] == 'f':
                Tile('farm', x, y)
    # вернем игрока, а также размер поля в клетках
    return new_player, x, y


def terminate():
    pygame.quit()
    sys.exit()


class Camera:
    # зададим начальный сдвиг камеры
    def __init__(self):
        self.dx = 0
        self.dy = 0

    # сдвинуть объект obj на смещение камеры
    def apply(self, obj):
        obj.rect.x += self.dx
        obj.rect.y += self.dy

    # позиционировать камеру на объекте target
    def update(self, target):
        self.dx = -(target.rect.x + target.rect.w // 2 - WIDTH // 2)
        self.dy = -(target.rect.y + target.rect.h // 2 - HEIGHT // 2)


if __name__ == '__main__':
    FPS = 60
    clock = pygame.time.Clock()

    pygame.display.init()

    pygame.key.set_repeat(200, 70) # function for pressing the key

    size = WIDTH, HEIGHT = 500, 500
    screen = pygame.display.set_mode(size)


    tile_images = {
        'hor_wall': pygame.image.load('iamges/map_images/hor_wall.png'),
        'empty': pygame.image.load('iamges/map_images/grass.png'),
        'ver_wall': pygame.image.load('iamges/map_images/ver_wall.png'),
        'r1_wall': pygame.image.load('iamges/map_images/right_wall.png'),
        'l1_wall': pygame.image.load('iamges/map_images/left_wall.png'),
        'r2_wall': pygame.image.load('iamges/map_images/right_wall2.png'),
        'l2_wall': pygame.image.load('iamges/map_images/left_wall2.png'),
        't1_u': pygame.image.load('iamges/map_images/t1_u.png'),
        't2_u': pygame.image.load('iamges/map_images/t2_u.png'),
        't3_u': pygame.image.load('iamges/map_images/t3_u.png'),
        't1_d': pygame.image.load('iamges/map_images/t1_d.png'),
        't2_d': pygame.image.load('iamges/map_images/t2_d.png'),
        't3_d': pygame.image.load('iamges/map_images/t3_d.png'),
        'rd': pygame.image.load('iamges/map_images/road.png'),
        'wt': pygame.image.load('iamges/map_images/water.png'),
        'farm': pygame.image.load('iamges/map_images/farm.png')
    }

    tile_width = tile_height = 50

    all_sprites = pygame.sprite.Group()
    tiles_group = pygame.sprite.Group()
    player_group = pygame.sprite.Group()

    player, level_x, level_y = generate_level(load_level('map.txt'))

    camera = Camera()
    for sprite in all_sprites:
        camera.apply(sprite)

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                player.update()

                # изменяем ракурс камеры
        camera.update(player)
                # обновляем положение всех спрайтов
        for sprite in all_sprites:
            camera.apply(sprite)

        screen.fill(pygame.Color(0, 0, 0))
        tiles_group.draw(screen)
        player_group.draw(screen)

        pygame.display.flip()

        clock.tick(FPS)
    terminate()
